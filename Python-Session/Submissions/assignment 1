{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#q1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter number12 21\n",
      "maximum no. is  21\n"
     ]
    }
   ],
   "source": [
    "n1,n2=input('enter number').split()\n",
    "n1=int(n1)\n",
    "n2=int(n2)\n",
    "if n1>n2:\n",
    "    print('maximum no. is ',n1)\n",
    "else:\n",
    "    print('maximum no. is ',n2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#q2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number25\n",
      "buzz\n"
     ]
    }
   ],
   "source": [
    "n=int(input('enter a number'))\n",
    "def fizz_buzz(n):\n",
    "    if n%3==0:\n",
    "        return 'fizz'\n",
    "    elif n%5==0:\n",
    "        return 'buzz'\n",
    "    elif(n%3==0 and n%5==0):\n",
    "        return 'fizzbuzz'\n",
    "    else:\n",
    "        return n\n",
    "print(fizz_buzz(n))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#q3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the speed:80\n",
      "Demrit points:  66.0\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "def speed(s):\n",
    "    d=0\n",
    "    if s<=70:\n",
    "        print('ok')\n",
    "    elif s >= 75 and s % 5 == 0:\n",
    "        d += s-75/5 +1;\n",
    "        print(\"Demrit points: \",d)\n",
    "    elif d >= 12:\n",
    "        print(\"Licanse is suspended\")\n",
    "s=int(input(\"enter the speed:\"))\n",
    "print(speed(s))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#q4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#q4\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number:5\n",
      "0 is even\n",
      "1 is odd\n",
      "2 is even\n",
      "3 is odd\n",
      "4 is even\n",
      "5 is odd\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "def shownumber(limit):\n",
    "    for i in range(limit+1):\n",
    "        if i%2==0:\n",
    "            print(i,'is even')\n",
    "        else:\n",
    "            print(i, 'is odd')\n",
    "n=int(input('enter a number:'))\n",
    "print(shownumber(n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "#q5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter a number:20\n",
      "0\n",
      "3\n",
      "8\n",
      "14\n",
      "23\n",
      "33\n",
      "45\n",
      "60\n",
      "78\n",
      "98\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "def num(limit):\n",
    "    sum = 0\n",
    "    for i in range(0,limit+1):\n",
    "        if i%3==0 or i%5==0:\n",
    "            sum +=i\n",
    "            print(sum)\n",
    "limit=int(input('enter a number:'))\n",
    "print(num(limit))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
